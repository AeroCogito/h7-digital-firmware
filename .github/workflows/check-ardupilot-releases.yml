---
name: Check ArduPilot Releases

on:
  schedule:
    # Run daily at UTC midnight
    - cron: '0 0 * * *'
  workflow_dispatch:  # Allow manual trigger

# Prevent concurrent release checks
concurrency:
  group: check-releases
  cancel-in-progress: true  # Can safely cancel duplicate checks

jobs:
  check-releases:
    runs-on: ubuntu-22.04  # Pinned for reproducible builds (not ubuntu-latest)
    timeout-minutes: 10  # Release checking should be quick
    outputs:
      new_release: ${{ steps.check.outputs.new_release }}
      release_tag: ${{ steps.check.outputs.release_tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          fetch-depth: 0

      - name: Check for new ArduPilot releases
        id: check
        run: |
          BASE_VERSION="Copter-4.6.2"

          # Fetch all Copter releases (authenticated to avoid rate limiting)
          HTTP_RESPONSE=$(curl -s -w "\n%{http_code}" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/ArduPilot/ardupilot/releases)

          HTTP_CODE=$(echo "$HTTP_RESPONSE" | tail -n1)
          RESPONSE_BODY=$(echo "$HTTP_RESPONSE" | sed '$d')

          if [ "$HTTP_CODE" != "200" ]; then
            echo "❌ Error: GitHub API request failed with status $HTTP_CODE"
            echo "Response: $RESPONSE_BODY"
            exit 1
          fi

          LATEST_RELEASE=$(echo "$RESPONSE_BODY" | \
            jq -r '[.[] | select(.tag_name | test("^Copter-[0-9]+\\.[0-9]+\\.[0-9]+$"))]
                   | map(.tag_name)
                   | sort_by(. | sub("Copter-";"") | split(".") | map(tonumber))
                   | last')

          echo "Latest Copter release: $LATEST_RELEASE"

          if [ -z "$LATEST_RELEASE" ] || [ "$LATEST_RELEASE" == "null" ]; then
            echo "❌ Error: Could not find any Copter releases"
            exit 1
          fi

          # Strip the "Copter-" prefix
          BASE_VER_NUM=${BASE_VERSION#Copter-}
          LATEST_VER_NUM=${LATEST_RELEASE#Copter-}

          # Compare numeric versions, exit if latest is not greater than baseline
          if [ "$(printf '%s\n%s' "$LATEST_VER_NUM" "$BASE_VER_NUM" | sort -V | tail -n1)" = "$BASE_VER_NUM" ]; then
            echo "Latest release ($LATEST_VER_NUM) is not greater than baseline ($BASE_VER_NUM)"
            echo "new_release=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Check if we've already built this version
          if git tag | grep -q "^${LATEST_RELEASE}-signed$"; then
            echo "Already built: $LATEST_RELEASE"
            echo "new_release=false" >> $GITHUB_OUTPUT
          else
            echo "New release found: $LATEST_RELEASE"
            echo "new_release=true" >> $GITHUB_OUTPUT
            echo "release_tag=$LATEST_RELEASE" >> $GITHUB_OUTPUT
          fi

      - name: Trigger build if new release
        if: steps.check.outputs.new_release == 'true'
        uses: peter-evans/repository-dispatch@5fc4efd1a4797ddb68ffd0714a238564e4cc0e6f  # v4.0.0
        with:
          token: ${{ secrets.DISPATCH_TOKEN }}
          event-type: build-new-release
          client-payload: '{"release_tag": "${{ steps.check.outputs.release_tag }}"}'

      - name: Log result
        run: |
          if [ "${{ steps.check.outputs.new_release }}" == "true" ]; then
            echo "✅ New release detected: ${{ steps.check.outputs.release_tag }}"
            echo "Build workflow triggered automatically"
          else
            echo "ℹ️ No new releases found"
          fi
